ARGS, CMP, ID

SEE NOTES
- https://www.npmjs.com/package/function-regex
- https://www.npmjs.com/package/regex-function-name
- https://www.npmjs.com/package/regex-native-function
- https://github.com/hipstersmoothie/compose-tiny

_.after
_.ary
_.before
_.bind
_.bindKey
_.flip
_.negate
_.overArgs
_.partial
_.partialRight
_.rearg

_.spread
_.unspread

_.unary
_.wrap

http://peter.michaux.ca/articles/lazy-function-definition-pattern
https://css-tricks.com/debouncing-throttling-explained-examples/
https://thinkrx.io/rxjs/startWith/
- toMap?
- toCompare
- iterate


https://www.npmjs.com/package/valid-url
https://www.npmjs.com/package/math.js
https://www.npmjs.com/package/nerdamer
https://www.npmjs.com/package/funjson
https://www.npmjs.com/package/geolib

https://www.npmjs.com/package/regl
https://www.npmjs.com/package/socks
https://www.npmjs.com/package/@bcoe/v8-coverage
https://www.npmjs.com/package/tslib
https://www.npmjs.com/package/redux
https://www.npmjs.com/package/underscore

https://www.npmjs.com/package/fp-ts
https://www.npmjs.com/package/recompose
https://www.npmjs.com/package/iterative
https://www.npmjs.com/package/rambda
https://www.npmjs.com/package/ramda
https://www.npmjs.com/package/collection-visit
https://www.npmjs.com/package/map-visit
https://www.npmjs.com/package/immutable
https://www.npmjs.com/package/updeep

https://www.npmjs.com/package/minipass-flush
https://www.npmjs.com/package/scramjet
https://www.npmjs.com/package/scramjet-core

https://www.npmjs.com/package/require-in-the-middle

https://www.npmjs.com/package/queue
https://www.npmjs.com/package/before-after-hook
https://www.npmjs.com/package/ffi-napi
https://www.npmjs.com/package/functools
https://www.npmjs.com/package/predicate
https://www.npmjs.com/package/@arrows/error
https://www.npmjs.com/package/@arrows/dispatch
https://www.npmjs.com/package/@arrows/composition
https://www.npmjs.com/package/@protobufjs/aspromise
https://www.npmjs.com/package/lru-memoizer
https://www.npmjs.com/package/typed-function
https://www.npmjs.com/package/is-generator-fn
https://www.npmjs.com/package/thunkify
https://www.npmjs.com/package/argx
https://www.npmjs.com/package/make-arrow-function
https://www.npmjs.com/package/parent-module
https://www.npmjs.com/package/make-generator-function
https://www.npmjs.com/package/run-parallel
https://www.npmjs.com/package/fastseries
https://www.npmjs.com/package/neo-async
https://www.npmjs.com/package/caller-callsite
https://www.npmjs.com/package/auto-bind
https://www.npmjs.com/package/tiny-warning
https://www.npmjs.com/package/arity-n
https://www.npmjs.com/package/callsites
https://www.npmjs.com/package/throat
https://www.npmjs.com/package/reusify
https://www.npmjs.com/package/deasync
https://www.npmjs.com/package/async-limiter
https://www.npmjs.com/package/thunky
https://www.npmjs.com/package/function-bind
https://www.npmjs.com/package/pify
https://www.npmjs.com/package/await-lock
https://www.npmjs.com/package/thenify
https://www.npmjs.com/package/waait
https://www.npmjs.com/package/poly-map
https://www.npmjs.com/package/delayed
https://www.npmjs.com/package/es6-arrow-function
https://www.npmjs.com/package/interceptable
https://www.npmjs.com/package/each
https://www.npmjs.com/package/degenerator

https://www.npmjs.com/package/function-arguments
https://www.npmjs.com/package/reduce-function-call
https://www.npmjs.com/package/compose-middleware


mtarh-cbind	function	Extra lightweight callbacks memorization
argumentsof	function	Npm module which parses arguments of any callables.
DEPRECATE, LOG
try catch
https://www.npmjs.com/package/try-to-catch

OVERLOAD
https://www.npmjs.com/package/superoverload

ASYNC_FROM
https://www.npmjs.com/package/denodeify
https://www.npmjs.com/package/@google-cloud/promisify
https://www.npmjs.com/package/es6-promisify
https://www.npmjs.com/package/run-async

EXTRA-JS
https://www.npmjs.com/package/generate-function

ASYNC ARRAY
https://www.npmjs.com/package/async






Not accepting additions, but happy to take requests.

pify: Promisify a callback-style function
delay: Delay a promise a specified amount of time
p-map: Map over promises concurrently
p-all: Run promise-returning & async functions concurrently with optional limited concurrency
p-queue: Promise queue with concurrency control
p-catch-if: Conditional promise catch handler
p-if: Conditional promise chains
p-tap: Tap into a promise chain without affecting its value or state
p-log: Log the value/error of a promise
p-event: Promisify an event by waiting for it to be emitted
p-debounce: Debounce promise-returning & async functions
p-throttle: Throttle promise-returning & async functions
p-timeout: Timeout a promise after a specified amount of time
p-finally: Promise#finally() ponyfill - Invoked when the promise is settled regardless of outcome
p-retry: Retry a promise-returning or async function
p-any: Wait for any promise to be fulfilled
p-some: Wait for a specified number of promises to be fulfilled
p-locate: Get the first fulfilled promise that satisfies the provided testing function
p-limit: Run multiple promise-returning & async functions with limited concurrency
p-series: Run promise-returning & async functions in series
p-memoize: Memoize promise-returning & async functions
p-pipe: Compose promise-returning & async functions into a reusable pipeline
p-props: Like Promise.all() but for Map and Object
p-waterfall: Run promise-returning & async functions in series, each passing its result to the next
p-cancelable: Create a promise that can be canceled
p-progress: Create a promise that reports progress
p-reflect: Make a promise always fulfill with its actual fulfillment value or rejection reason
p-filter: Filter promises concurrently
p-reduce: Reduce a list of values using promises into a promise for a value
p-settle: Settle promises concurrently and get their fulfillment value or rejection reason
p-every: Test whether all promises passes a testing function
p-one: Test whether some promise passes a testing function
p-map-series: Map over promises serially
p-each-series: Iterate over promises serially
p-times: Run promise-returning & async functions a specific number of times concurrently
p-lazy: Create a lazy promise that defers execution until .then() or .catch() is called
p-whilst: While a condition returns true, calls a function repeatedly, and then resolves the promise
p-do-whilst: Calls a function repeatedly while a condition returns true and then resolves the promise
p-forever: Run promise-returning & async functions repeatedly until you end it
p-wait-for: Wait for a condition to be true
p-min-delay: Delay a promise a minimum amount of time
p-try: Promise.try() ponyfill - Starts a promise chain
p-race: A better Promise.race()
p-immediate: Returns a promise resolved in the next event loop - think setImmediate()
p-time: Measure the time a promise takes to resolve
p-defer: Create a deferred promise
p-break: Break out of a promise chain
p-is-promise: Check if something is a promise
loud-rejection: Make unhandled promise rejections fail loudly instead of the default silent fail
hard-rejection: Make unhandled promise rejections fail hard right away instead of the default silent fail
